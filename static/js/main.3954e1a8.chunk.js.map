{"version":3,"sources":["Helpers/vectorHelpers.ts","Classes/SetCard.ts","Classes/ShapeType.ts","Helpers/contourHelpers.ts","Helpers/colours.ts","Classes/SetShape.ts","Helpers/findShapes.ts","Helpers/makeGreyImage.ts","Helpers/findContours.ts","Helpers/findCards.ts","Helpers/findSets.ts","Helpers/annotateImage.ts","Components/ImageProcessor/ImageProcessor.styles.tsx","Components/ImageProcessor/ImageProcessor.tsx","Components/ImageUploader/ImageUploader.styles.tsx","Components/ImageUploader/ImageUploader.tsx","Components/App/App.styles.tsx","Components/App/App.tsx","index.tsx"],"names":["vectorLength","vector","Math","sqrt","x","y","subtractVector","a","b","cv","Point","addVector","SetCard","shapeType","shapes","this","length","center","shape","minRect","scalar","scalarMultiplyVector","ShapeType","undefined","colour","shading","shapeExtent","contourColour","hue","insideColour","outsideColour","fallOff","other","growContour","contour","pixels","dataLength","data32S","newContour","Mat","CV_32S","prevPoint","getContourPoint","point","nextPoint","i","dist","getDistVector","facing","getNormalOrtho","floor","doubledIndex","p","p0","p1","white","black","lineColours","meanRGBToHSL","rgb","convert","hsl","unsafeCoerce","SetShape","minLength","childContour","parentContour","invalid","meanContour","meanInside","meanOutside","extent","id","size","width","height","min","uuid","setShapeType","setShapeColour","setShapeShading","originalImage","rect","boundingRect","matVec","MatVector","push_back","offset","roi","roiSize","mask","zeros","CV_8U","drawContours","LINE_8","mean","delete","hslInside","hslOutside","r","g","findShapes","image","greyImage","blurred","grey","GaussianBlur","Size","BORDER_DEFAULT","cvtColor","COLOR_BGR2GRAY","makeGreyImage","contours","imageThreshold","hierarchy","adaptiveThreshold","ADAPTIVE_THRESH_GAUSSIAN_C","THRESH_BINARY","findContours","RETR_TREE","CHAIN_APPROX_SIMPLE","shapeCandidates","findCandidateShapes","actualShapes","filterActualShapes","imageSize","minContourPoints","minBoundsSize","minMinRectSize","maxMinRectSize","possibleShapes","get","minAreaRect","ratioFits","contourArea","validateBounds","calculateMeans","push","wb","calculateWhiteBalanceAdjustments","forEach","s","adjustWhiteBalance","setShape","reduce","totR","totG","totB","aveR","aveG","aveB","aveGrey","ratio","filter","every","otherShape","pointX","pointY","pointPolygonTest","addShapesToCards","cards","card","includes","detectSetCards","linkedShapes","foundCards","isShapeLinked","k","equals","midDistSquared","max","findSetCards","isSet","colourSet","Set","shapeSet","shadingSet","countSet","c","add","shapeCount","drawLineBetween","card1","card2","mid1","mid","mid2","circle","LINE_AA","line","drawShapeOnImage","label","toUpperCase","slice","anchor","cloneVector","putText","FONT_HERSHEY_SIMPLEX","Wrapper","styled","div","InputImage","img","OutputCanvas","canvas","DebugButton","button","ImageProcessor","imageUrl","useState","imageReadyToProcess","setImageReadyToProcess","debug","setDebug","setCards","resized","setResized","outputCanvasRef","useRef","inputImgRef","useEffect","current","maxFactor","resize","resizeImage","imread","drawing","clone","j","sets","findSets","set","mid0","dist0","dist1","dist2","drawSetOnImage","imshow","src","onLoad","e","ref","alt","onClick","elemTop","clientTop","offsetTop","elemLeft","clientLeft","offsetLeft","clickX","pageX","clickY","pageY","flatMap","sort","console","log","UploadButton","UploadInput","input","ImageUploader","onUpload","inputRef","onChange","useCallback","files","target","URL","createObjectURL","type","accept","click","App","currentImageUrl","setCurrentImageUrl","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3954e1a8.chunk.js","sourcesContent":["import cv from \"@techstark/opencv-js\";\n\nexport const vectorLength = (vector: cv.Point): number =>\n  Math.sqrt(vector.x ** 2 + vector.y ** 2);\n\nexport const cloneVector = ({ x, y }: cv.Point): cv.Point => new cv.Point(x, y);\n\nexport const subtractVector = (a: cv.Point, b: cv.Point): cv.Point =>\n  new cv.Point(a.x - b.x, a.y - b.y);\n\nexport const addVector = (a: cv.Point, b: cv.Point): cv.Point =>\n  new cv.Point(a.x + b.x, a.y + b.y);\n\nexport const scalarMultiplyVector = (\n  { x, y }: cv.Point,\n  scalar: number\n): cv.Point => new cv.Point(x * scalar, y * scalar);\n\nexport const distanceSquared = (a: cv.Point, b: cv.Point): number =>\n  (b.x - a.x) ** 2 + (b.y - a.y) ** 2;\n","import cv from \"@techstark/opencv-js\";\nimport { addVector, scalarMultiplyVector } from \"../Helpers/vectorHelpers\";\nimport { SetShape } from \"./SetShape\";\nimport { ShapeType } from \"./ShapeType\";\n\nexport class SetCard {\n  public shapeType: ShapeType;\n  public shapes: SetShape[];\n\n  constructor(shapeType: ShapeType, shapes: SetShape[] = []) {\n    this.shapeType = shapeType;\n    this.shapes = shapes;\n  }\n\n  shapeCount() {\n    return this.shapes.length;\n  }\n\n  mid() {\n    let center = new cv.Point(0, 0);\n\n    for (let shape of this.shapes) {\n      center = addVector(center, shape.minRect.center);\n    }\n\n    center = scalarMultiplyVector(center, 1 / this.shapes.length);\n    return center;\n  }\n}\n","import { HSL } from \"color-convert/conversions\";\n\nexport type Shape = \"DIAMOND\" | \"OVAL\" | \"SQUIGGLE\";\nexport type ShapeColour = \"RED\" | \"PURPLE\" | \"GREEN\";\nexport type Shading = \"OPEN\" | \"SOLID\" | \"STRIPED\";\n\nexport class ShapeType {\n  shape?: Shape;\n  colour?: ShapeColour;\n  shading?: Shading;\n\n  constructor(shape = undefined, colour = undefined, shading = undefined) {\n    this.shape = shape;\n    this.colour = colour;\n    this.shading = shading;\n  }\n\n  setShapeType(shapeExtent: number) {\n    if (shapeExtent < 0.666) {\n      this.shape = \"DIAMOND\";\n    } else if (shapeExtent < 0.81) {\n      this.shape = \"SQUIGGLE\";\n    } else {\n      this.shape = \"OVAL\";\n    }\n  }\n\n  setShapeColour(contourColour: HSL) {\n    const hue = contourColour[0];\n\n    if (hue >= 340 || hue <= 15) {\n      this.colour = \"RED\";\n    } else if (hue >= 240 && hue <= 300) {\n      this.colour = \"PURPLE\";\n    } else if (hue >= 60 && hue <= 180) {\n      this.colour = \"GREEN\";\n    } else {\n      //white balance fix should make this irrelevant\n      this.colour = \"PURPLE\";\n    }\n  }\n\n  setShapeShading(insideColour: HSL, outsideColour: HSL) {\n    let fallOff = outsideColour[2] - insideColour[2];\n\n    if (fallOff <= 4) {\n      this.shading = \"OPEN\";\n    } else if (fallOff < 21) {\n      this.shading = \"STRIPED\";\n    } else {\n      this.shading = \"SOLID\";\n    }\n  }\n\n  equals(other: ShapeType) {\n    return (\n      this.colour === other.colour &&\n      this.shading === other.shading &&\n      this.shape === other.shape\n    );\n  }\n\n  toString() {\n    return `${this.colour} ${this.shading} ${this.shape}`;\n  }\n}\n","import cv from \"@techstark/opencv-js\";\n\nexport const growContour = (contour: cv.Mat, pixels: number): cv.Mat => {\n  const dataLength = contour.data32S.length;\n  const newContour = new cv.Mat(dataLength / 2, 2, cv.CV_32S);\n\n  let prevPoint = getContourPoint(contour, 0);\n  let point = getContourPoint(contour, 2);\n  let nextPoint = getContourPoint(contour, 4);\n\n  for (let i = 6; i < dataLength + 6; i += 2) {\n    const dist = getDistVector(prevPoint, nextPoint);\n\n    if (dist[0] !== 0 || dist[1] !== 0) {\n      const facing = getNormalOrtho(dist);\n\n      newContour.data32S[i % dataLength] = Math.floor(\n        point[0] + pixels * facing[0]\n      );\n      newContour.data32S[(i + 1) % dataLength] = Math.floor(\n        point[1] + pixels * facing[1]\n      );\n    }\n\n    prevPoint = point;\n    point = nextPoint;\n    nextPoint = getContourPoint(contour, i % dataLength);\n  }\n\n  return newContour;\n};\n\nexport const getContourPoint = (contour: cv.Mat, doubledIndex: number) => [\n  contour.data32S[doubledIndex],\n  contour.data32S[doubledIndex + 1],\n];\n\nexport const getNormalOrtho = (p: [number, number]): [number, number] => {\n  const length = Math.sqrt(p[0] ** 2 + p[1] ** 2);\n  return [p[1] / length, -p[0] / length];\n};\n\nexport const getDistVector = (p0: number[], p1: number[]): [number, number] => {\n  return [p1[0] - p0[0], p1[1] - p0[1]];\n};\n","import cv from \"@techstark/opencv-js\";\nimport convert from \"color-convert\";\nimport { HSL, RGB } from \"color-convert/conversions\";\nimport { unsafeCoerce } from \"fp-ts/lib/function\";\n\nexport const white = [255, 255, 255, 255];\nexport const black = [0, 0, 0, 255];\nexport const red = [255, 0, 0, 255];\nexport const green = [0, 255, 0, 255];\nexport const blue = [0, 0, 255, 255];\nexport const orange = [255, 128, 0, 255];\nexport const cyan = [0, 255, 255, 255];\nexport const magenta = [255, 0, 255, 255];\n\nexport const lineColours = [magenta, red, green, blue, orange, cyan];\n\nexport const meanRGBToHSL = (rgb: cv.Scalar): HSL =>\n  convert.rgb.hsl(unsafeCoerce<cv.Scalar, RGB>(rgb));\n","import { v4 as uuid } from \"uuid\";\nimport { ShapeType } from \"./ShapeType\";\nimport cv from \"@techstark/opencv-js\";\nimport { growContour } from \"../Helpers/contourHelpers\";\nimport { black, meanRGBToHSL, white } from \"../Helpers/colours\";\n\nexport class SetShape {\n  shapeType: ShapeType;\n  minRect: cv.RotatedRect;\n  minLength: number;\n  contour: cv.Mat;\n  childContour: cv.Mat;\n  parentContour: cv.Mat;\n  invalid: boolean;\n  meanContour?: cv.Scalar;\n  meanInside?: cv.Scalar;\n  meanOutside?: cv.Scalar;\n  extent: number;\n  id: string;\n\n  constructor(contour: cv.Mat, minRect: cv.RotatedRect, shapeExtent: number) {\n    const { width, height } = minRect.size;\n    const minLength = Math.min(width, height);\n\n    this.id = uuid();\n    this.minRect = minRect;\n    this.minLength = Math.min(minRect.size.width, minRect.size.height);\n    this.contour = contour;\n    this.childContour = growContour(contour, minLength * -0.1);\n    this.parentContour = growContour(contour, minLength * 0.2);\n    this.shapeType = new ShapeType();\n    this.invalid = false;\n    this.extent = shapeExtent;\n  }\n\n  setShape() {\n    if (this.meanContour && this.meanInside && this.meanOutside) {\n      this.shapeType.setShapeType(this.extent);\n      this.shapeType.setShapeColour(meanRGBToHSL(this.meanContour));\n      this.shapeType.setShapeShading(\n        meanRGBToHSL(this.meanInside),\n        meanRGBToHSL(this.meanOutside)\n      );\n    }\n  }\n\n  validateBounds(originalImage: cv.Mat) {\n    const { width, height } = originalImage.size();\n    const rect = cv.boundingRect(this.parentContour);\n\n    this.invalid =\n      rect.x < 0 ||\n      rect.x + rect.width >= width ||\n      rect.y < 0 ||\n      rect.y + rect.height >= height;\n  }\n\n  calculateMeans(originalImage: cv.Mat) {\n    const matVec = new cv.MatVector();\n    matVec.push_back(this.childContour);\n    matVec.push_back(this.contour);\n    matVec.push_back(this.parentContour);\n\n    const rect = cv.boundingRect(this.parentContour);\n    const offset = new cv.Point(-rect.x, -rect.y);\n\n    const roi = originalImage.roi(rect);\n    const roiSize = roi.size();\n    const mask = cv.Mat.zeros(roiSize.height, roiSize.width, cv.CV_8U);\n\n    cv.drawContours(\n      mask,\n      matVec,\n      0,\n      white,\n      -1,\n      cv.LINE_8,\n      new cv.Mat(),\n      0,\n      offset\n    );\n\n    this.meanInside = cv.mean(roi, mask);\n\n    cv.drawContours(\n      mask,\n      matVec,\n      1,\n      white,\n      -1,\n      cv.LINE_8,\n      new cv.Mat(),\n      0,\n      offset\n    );\n    cv.drawContours(\n      mask,\n      matVec,\n      0,\n      black,\n      -1,\n      cv.LINE_8,\n      new cv.Mat(),\n      0,\n      offset\n    );\n\n    this.meanContour = cv.mean(roi, mask);\n\n    cv.drawContours(\n      mask,\n      matVec,\n      2,\n      white,\n      -1,\n      cv.LINE_8,\n      new cv.Mat(),\n      0,\n      offset\n    );\n    cv.drawContours(\n      mask,\n      matVec,\n      1,\n      black,\n      -1,\n      cv.LINE_8,\n      new cv.Mat(),\n      0,\n      offset\n    );\n\n    this.meanOutside = cv.mean(roi, mask);\n\n    roi.delete();\n    mask.delete();\n    matVec.delete();\n\n    const hslInside = meanRGBToHSL(this.meanInside);\n    const hslOutside = meanRGBToHSL(this.meanOutside);\n    this.invalid = hslInside[2] - hslOutside[2] > 10;\n  }\n\n  adjustWhiteBalance([r, g, b]: [number, number, number]) {\n    if (this.meanContour) {\n      this.meanContour[0] -= r;\n      this.meanContour[1] -= g;\n      this.meanContour[2] -= b;\n    }\n  }\n}\n","import cv from \"@techstark/opencv-js\";\nimport { unsafeCoerce } from \"fp-ts/lib/function\";\nimport { SetShape } from \"../Classes/SetShape\";\nimport { findContours } from \"./findContours\";\nimport { makeGreyImage } from \"./makeGreyImage\";\n\nconst minContourPointRatio = 0.04;\nconst minBoundsSizeRatio = 0.03;\nconst minMinRectSizeRatio = 0.025;\nconst maxMinRectSizeRatio = 0.19;\nconst minExtent = 0.55;\nconst maxExtent = 0.9;\nconst minRatio = 1.3;\nconst maxRatio = 3.2;\n\nexport const findShapes = (image: cv.Mat): SetShape[] => {\n  const greyImage = makeGreyImage(image);\n  const contours = findContours(greyImage);\n  const shapeCandidates = findCandidateShapes(contours, image);\n\n  const actualShapes = filterActualShapes(shapeCandidates);\n\n  greyImage.delete();\n  contours.delete();\n\n  return actualShapes;\n};\n\nconst findCandidateShapes = (\n  contours: cv.Mat,\n  originalImage: cv.Mat\n): SetShape[] => {\n  const imageSize = originalImage.size();\n  const minLength = Math.min(imageSize.width, imageSize.height);\n  const minContourPoints = minLength * minContourPointRatio;\n  const minBoundsSize = minLength * minBoundsSizeRatio;\n  const minMinRectSize = minLength * minMinRectSizeRatio;\n  const maxMinRectSize = minLength * maxMinRectSizeRatio;\n\n  const possibleShapes: SetShape[] = [];\n\n  const length = unsafeCoerce<cv.Size, number>(contours.size());\n\n  for (let i = 0; i < length; i++) {\n    const contour = contours.get(i);\n    const cLength = contour.data32S.length;\n\n    if (cLength < minContourPoints) {\n      continue;\n    }\n\n    const boundingRect = cv.boundingRect(contour);\n\n    if (\n      boundingRect.width < minBoundsSize &&\n      boundingRect.height < minBoundsSize\n    ) {\n      continue;\n    }\n\n    const minRect = cv.minAreaRect(contour);\n    const { width, height } = minRect.size;\n\n    if (width < minMinRectSize || height < minMinRectSize) {\n      continue;\n    }\n\n    if (width > maxMinRectSize && height > maxMinRectSize) {\n      continue;\n    }\n\n    if (!ratioFits(width, height)) {\n      continue;\n    }\n\n    const area = cv.contourArea(contour);\n    const shapeExtent = area / (width * height);\n\n    if (shapeExtent < minExtent) {\n      continue;\n    }\n\n    if (shapeExtent > maxExtent) {\n      continue;\n    }\n\n    const shape = new SetShape(contour, minRect, shapeExtent);\n\n    shape.validateBounds(originalImage);\n\n    if (!shape.invalid) {\n      shape.calculateMeans(originalImage);\n    }\n\n    if (!shape.invalid) {\n      possibleShapes.push(shape);\n    }\n  }\n\n  const wb = calculateWhiteBalanceAdjustments(possibleShapes);\n\n  possibleShapes.forEach((s) => {\n    s.adjustWhiteBalance(wb);\n    s.setShape();\n  });\n\n  return possibleShapes;\n};\n\nconst calculateWhiteBalanceAdjustments = (\n  shapes: SetShape[]\n): [number, number, number] => {\n  const [totR, totG, totB] = shapes.reduce(\n    ([r, g, b], s) => {\n      return [\n        r + (s.meanOutside?.[0] ?? 0),\n        g + (s.meanOutside?.[1] ?? 0),\n        b + (s.meanOutside?.[2] ?? 0),\n      ];\n    },\n    [0, 0, 0]\n  );\n\n  const aveR = totR / shapes.length;\n  const aveG = totG / shapes.length;\n  const aveB = totB / shapes.length;\n\n  const aveGrey = (aveR + aveG + aveB) / 3;\n\n  return [aveR - aveGrey, aveG - aveGrey, aveB - aveGrey];\n};\n\nconst ratioFits = (width: number, height: number) => {\n  const ratio = width > height ? width / height : height / width;\n  return ratio > minRatio && ratio < maxRatio;\n};\n\nconst filterActualShapes = (shapes: SetShape[]): SetShape[] =>\n  shapes.filter((shape) => {\n    return shapes.every((otherShape) => {\n      if (shape === otherShape) {\n        return true;\n      }\n\n      let pointX = shape.contour.data32S[0];\n      let pointY = shape.contour.data32S[1];\n\n      if (\n        cv.pointPolygonTest(\n          otherShape.contour,\n          new cv.Point(pointX, pointY),\n          false\n        ) > 0\n      ) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n","import cv from \"@techstark/opencv-js\";\n\n/**\n * Convert an image to a slightly blurred grey scale image\n * @param image a colour image\n * @returns\n */\nexport const makeGreyImage = (image: cv.Mat): cv.Mat => {\n  const blurred = new cv.Mat();\n  const grey = new cv.Mat();\n\n  cv.GaussianBlur(image, blurred, new cv.Size(5, 5), cv.BORDER_DEFAULT);\n\n  cv.cvtColor(blurred, grey, cv.COLOR_BGR2GRAY);\n\n  blurred.delete();\n\n  return grey;\n};\n","import cv from \"@techstark/opencv-js\";\n\n/**\n * Find the contours in a grey scale image\n * @param image a greyscale image\n * @returns\n */\nexport const findContours = (image: cv.Mat): cv.MatVector => {\n  const imageThreshold = new cv.Mat();\n  const contours = new cv.MatVector();\n  const hierarchy = new cv.Mat();\n\n  cv.adaptiveThreshold(\n    image,\n    imageThreshold,\n    255,\n    cv.ADAPTIVE_THRESH_GAUSSIAN_C,\n    cv.THRESH_BINARY,\n    7,\n    2\n  );\n  cv.findContours(\n    imageThreshold,\n    contours,\n    hierarchy,\n    cv.RETR_TREE,\n    cv.CHAIN_APPROX_SIMPLE\n  );\n\n  imageThreshold.delete();\n  hierarchy.delete();\n  return contours;\n};\n","import cv from \"@techstark/opencv-js\";\nimport { SetCard } from \"../Classes/SetCard\";\nimport { SetShape } from \"../Classes/SetShape\";\nimport { findShapes } from \"./findShapes\";\nimport { distanceSquared } from \"./vectorHelpers\";\n\nconst addShapesToCards = (\n  cards: SetCard[],\n  shape: SetShape,\n  otherShape: SetShape\n) => {\n  for (let card of cards) {\n    if (card.shapes.includes(shape)) {\n      card.shapes.push(otherShape);\n      return;\n    } else if (card.shapes.includes(otherShape)) {\n      card.shapes.push(shape);\n      return;\n    }\n  }\n\n  cards.push(new SetCard(shape.shapeType, [shape, otherShape]));\n};\n\nconst findSetCards = (shapes: SetShape[]) => {\n  const linkedShapes: SetShape[] = [];\n  const foundCards: SetCard[] = [];\n\n  for (let i = 0; i < shapes.length; i++) {\n    const shape = shapes[i];\n\n    let isShapeLinked = linkedShapes.includes(shape);\n\n    for (let k = i + 1; k < shapes.length; k++) {\n      let other = shapes[k];\n\n      if (!other.shapeType.equals(shape.shapeType)) {\n        continue;\n      }\n\n      const midDistSquared = distanceSquared(\n        shape.minRect.center,\n        other.minRect.center\n      );\n\n      if (\n        Math.sqrt(midDistSquared) <\n        1.75 * Math.max(shape.minLength, other.minLength)\n      ) {\n        linkedShapes.push(other);\n        addShapesToCards(foundCards, shape, other);\n        isShapeLinked = true;\n      }\n    }\n\n    if (!isShapeLinked) {\n      foundCards.push(new SetCard(shape.shapeType, [shape]));\n    }\n  }\n\n  return foundCards;\n};\n\nexport const detectSetCards = (image: cv.Mat) => {\n  const shapes = findShapes(image);\n  const cards = findSetCards(shapes);\n\n  return cards;\n};\n","import { SetCard } from \"../Classes/SetCard\";\n\nexport const findSets = (cards: SetCard[]): SetCard[][] => {\n  const sets: SetCard[][] = [];\n  for (let i = 0; i <= cards.length - 3; i++) {\n    for (let j = i + 1; j <= cards.length - 2; j++) {\n      for (let k = j + 1; k <= cards.length - 1; k++) {\n        if (isSet([cards[i], cards[j], cards[k]])) {\n          sets.push([cards[i], cards[j], cards[k]]);\n        }\n      }\n    }\n  }\n  return sets;\n};\n\nconst isSet = (cards: SetCard[]): boolean => {\n  const colourSet = new Set();\n  const shapeSet = new Set();\n  const shadingSet = new Set();\n  const countSet = new Set();\n  cards.forEach((c) => {\n    colourSet.add(c.shapeType.colour);\n    shapeSet.add(c.shapeType.shape);\n    shadingSet.add(c.shapeType.shading);\n    countSet.add(c.shapeCount());\n  });\n\n  return (\n    colourSet.size % 2 === 1 &&\n    shapeSet.size % 2 === 1 &&\n    shadingSet.size % 2 === 1 &&\n    countSet.size % 2 === 1\n  );\n};\n","import cv from \"@techstark/opencv-js\";\nimport { SetCard } from \"../Classes/SetCard\";\nimport { SetShape } from \"../Classes/SetShape\";\nimport { black } from \"./colours\";\nimport {\n  addVector,\n  cloneVector,\n  subtractVector,\n  vectorLength,\n} from \"./vectorHelpers\";\n\nexport const drawSetOnImage = (\n  image: cv.Mat,\n  set: SetCard[],\n  colour: number[]\n) => {\n  const mid0 = set[0].mid();\n  const mid1 = set[1].mid();\n  const mid2 = set[2].mid();\n\n  const dist0 = vectorLength(subtractVector(mid0, mid1));\n  const dist1 = vectorLength(subtractVector(mid1, mid2));\n  const dist2 = vectorLength(subtractVector(mid2, mid0));\n\n  if (dist0 < dist1) {\n    drawLineBetween(set[0], set[1], image, colour, 3);\n\n    if (dist1 < dist2) {\n      drawLineBetween(set[1], set[2], image, colour, 3);\n    } else {\n      drawLineBetween(set[2], set[0], image, colour, 3);\n    }\n  } else {\n    drawLineBetween(set[1], set[2], image, colour, 3);\n\n    if (dist0 < dist2) {\n      drawLineBetween(set[0], set[1], image, colour, 3);\n    } else {\n      drawLineBetween(set[2], set[0], image, colour, 3);\n    }\n  }\n};\n\nconst drawLineBetween = (\n  card1: SetCard,\n  card2: SetCard,\n  image: cv.Mat,\n  colour: number[],\n  width: number\n) => {\n  let mid1 = card1.mid();\n  let mid2 = card2.mid();\n\n  cv.circle(image, mid1, 2 * width, colour, -1, cv.LINE_AA);\n  cv.circle(image, mid2, 2 * width, colour, -1, cv.LINE_AA);\n  cv.line(image, mid1, mid2, colour, width, cv.LINE_AA);\n};\n\nexport const drawShapeOnImage = (image: cv.Mat, shape: SetShape) => {\n  const mid = shape.minRect.center;\n\n  cv.circle(image, mid, (shape.minLength * 2) / 3, shape.meanContour, -1);\n  cv.circle(image, mid, shape.minLength / 2, shape.meanInside, -1);\n\n  const label = `${shape.shapeType.colour?.[0] ?? \"?\"}${\n    shape.shapeType.shape?.[0].toUpperCase() ?? \"?\"\n  }${shape.shapeType.shading?.slice(0, 2) ?? \"??\"}`;\n\n  const anchor = addVector(cloneVector(mid), { x: -20, y: 5 });\n\n  cv.putText(\n    image,\n    label,\n    anchor,\n    cv.FONT_HERSHEY_SIMPLEX,\n    0.5,\n    black,\n    1,\n    cv.LINE_AA\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  max-height: min(calc(100vh - 160px), calc(100% - 24px));\n  max-width: calc(min(100%, 100vw) - 24px);\n`;\n\nexport const InputImage = styled.img`\n  display: none;\n`;\n\nexport const OutputCanvas = styled.canvas`\n  border-radius 10px;\n  max-width: calc(100% - 24px);\n  max-height: calc(100% - 24px);\n`;\n\nexport const DebugButton = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #314755 0%,\n    #26a0da 51%,\n    #314755 100%\n  );\n  padding: 15px 45px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n  font-size: 16px;\n  border: 0;\n\n  &:hover {\n    background-position: right center;\n    text-decoration: none;\n    box-shadow: 0 0 0px #eee;\n  }\n`;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport cv from \"@techstark/opencv-js\";\nimport { detectSetCards } from \"../../Helpers/findCards\";\nimport { findSets } from \"../../Helpers/findSets\";\nimport { drawSetOnImage, drawShapeOnImage } from \"../../Helpers/annotateImage\";\nimport { lineColours } from \"../../Helpers/colours\";\nimport {\n  DebugButton,\n  InputImage,\n  OutputCanvas,\n  Wrapper,\n} from \"./ImageProcessor.styles\";\nimport { SetCard } from \"../../Classes/SetCard\";\nimport { subtractVector, vectorLength } from \"../../Helpers/vectorHelpers\";\n\ninterface Props {\n  imageUrl: string;\n}\n\nconst resizeImage = (image: cv.Mat): cv.Mat => {\n  const { width, height } = image.size();\n\n  const maxFactor = Math.floor(Math.max(width, height) / 1000);\n\n  const resized = new cv.Mat();\n\n  if (maxFactor > 1) {\n    cv.resize(\n      image,\n      resized,\n      new cv.Size(Math.floor(width / maxFactor), Math.floor(height / maxFactor))\n    );\n    image.delete();\n    return resized;\n  }\n  return image;\n};\n\nexport const ImageProcessor = ({ imageUrl }: Props) => {\n  const [imageReadyToProcess, setImageReadyToProcess] = useState(false);\n  const [debug, setDebug] = useState(false);\n  const [cards, setCards] = useState<SetCard[]>([]);\n  const [resized, setResized] = useState<cv.Mat>();\n  const outputCanvasRef = useRef<HTMLCanvasElement>(null);\n  const inputImgRef = useRef<HTMLImageElement>(null);\n\n  useEffect(() => {\n    setImageReadyToProcess(false);\n    setResized(undefined);\n    setCards([]);\n    setDebug(false);\n  }, [imageUrl]);\n\n  useEffect(() => {\n    if (inputImgRef.current && imageReadyToProcess) {\n      const mat = cv.imread(inputImgRef.current);\n      const resized = resizeImage(mat);\n      const cards = detectSetCards(resized);\n      setCards(cards);\n      setResized(resized);\n    }\n  }, [inputImgRef, imageReadyToProcess]);\n\n  useEffect(() => {\n    if (imageReadyToProcess && cards && outputCanvasRef.current && resized) {\n      const drawing = resized.clone();\n      if (!debug) {\n        const sets = findSets(cards);\n        sets.forEach((set, i) => {\n          drawSetOnImage(drawing, set, lineColours[i]);\n        });\n      } else {\n        cards.forEach((card, j) => {\n          card.shapes.forEach((shape) => {\n            drawShapeOnImage(drawing, shape);\n          });\n        });\n      }\n\n      cv.imshow(outputCanvasRef.current, drawing);\n    }\n  }, [imageReadyToProcess, outputCanvasRef, resized, cards, debug]);\n\n  const onImageLoadCallback = (\n    e: React.SyntheticEvent<HTMLImageElement, Event>\n  ) => {\n    setImageReadyToProcess(true);\n  };\n\n  const onCanvasClick = (e: React.MouseEvent) => {\n    if (outputCanvasRef.current) {\n      const elemTop =\n        outputCanvasRef.current.clientTop + outputCanvasRef.current.offsetTop;\n      const elemLeft =\n        outputCanvasRef.current.clientLeft + outputCanvasRef.current.offsetLeft;\n\n      const clickX = e.pageX - elemLeft;\n      const clickY = e.pageY - elemTop;\n\n      const shapes = cards.flatMap((c) => c.shapes);\n      shapes.sort((a, b) => {\n        const distA = vectorLength(\n          subtractVector({ x: clickX, y: clickY }, a.minRect.center)\n        );\n        const distB = vectorLength(\n          subtractVector({ x: clickX, y: clickY }, b.minRect.center)\n        );\n        return distA < distB ? -1 : 1;\n      });\n\n      console.log(shapes[0]);\n    }\n  };\n\n  return (\n    <>\n      <Wrapper>\n        <InputImage\n          src={imageUrl}\n          onLoad={onImageLoadCallback}\n          ref={inputImgRef}\n          alt=\"Original Image\"\n        />\n        <OutputCanvas ref={outputCanvasRef} onClick={onCanvasClick} />\n      </Wrapper>\n      {resized && cards && (\n        <DebugButton onClick={() => setDebug(!debug)}>\n          {debug ? \"Show Sets\" : \"Show Debug\"}\n        </DebugButton>\n      )}\n    </>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div``;\n\nexport const UploadButton = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #ff512f 0%,\n    #f09819 51%,\n    #ff512f 100%\n  );\n  padding: 15px 45px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  box-shadow: 0 0 20px #eee;\n  border-radius: 10px;\n  display: block;\n  font-size: 16px;\n  border: 0;\n\n  &:hover {\n    background-position: right center;\n    text-decoration: none;\n    box-shadow: 0 0 0px #eee;\n  }\n`;\n\nexport const UploadInput = styled.input`\n  display: none;\n`;\n","import React, { useCallback, useRef } from \"react\";\nimport { UploadButton, UploadInput, Wrapper } from \"./ImageUploader.styles\";\n\ninterface Props {\n  onUpload: (image: string) => void;\n}\n\nexport const ImageUploader = ({ onUpload }: Props) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const onChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const files = e.target.files ?? [];\n      if (files.length > 0) {\n        onUpload(URL.createObjectURL(files[0]));\n      }\n    },\n    [onUpload]\n  );\n\n  return (\n    <Wrapper>\n      <UploadInput\n        ref={inputRef}\n        id=\"file\"\n        type=\"file\"\n        accept=\"image/*\"\n        onChange={onChange}\n      />\n      <UploadButton onClick={() => inputRef.current?.click()}>\n        Upload Image\n      </UploadButton>\n    </Wrapper>\n  );\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100vw;\n  align-items: center;\n  justify-content: center;\n  background: #f3f3f3;\n`;\n","import React, { useState } from \"react\";\nimport { ImageProcessor } from \"../ImageProcessor/ImageProcessor\";\nimport { ImageUploader } from \"../ImageUploader/ImageUploader\";\nimport { Wrapper } from \"./App.styles\";\n\nconst App = () => {\n  const [currentImageUrl, setCurrentImageUrl] = useState<string>();\n  return (\n    <Wrapper>\n      <ImageUploader onUpload={(image) => setCurrentImageUrl(image)} />\n      {currentImageUrl && <ImageProcessor imageUrl={currentImageUrl} />}\n    </Wrapper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}